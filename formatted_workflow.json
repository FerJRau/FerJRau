{
  "createdAt": "2025-07-24T14:19:11.663Z",
  "updatedAt": "2025-07-24T15:19:29.000Z",
  "id": "GJI87kugFbSeAya2",
  "name": "AI Logging Workflow v2",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "updates": [
          "messages"
        ],
        "options": {}
      },
      "type": "n8n-nodes-base.whatsAppTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "whatsapp-trigger",
      "name": "WhatsApp Trigger",
      "webhookId": "3cfee691-f47f-4b47-b8dd-30ddc7f9a80f",
      "credentials": {
        "whatsAppTriggerApi": {
          "id": "16hwZHCQOjWbseHT",
          "name": "WhatsApp OAuth LFV"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "input-validator-condition",
              "leftValue": "={{ $json.entry?.[0]?.changes?.[0]?.value?.messages?.length > 0 }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        208,
        0
      ],
      "id": "input-validator",
      "name": "Input Validator"
    },
    {
      "parameters": {
        "jsCode": "// Data Processor - Handle both webhook and manual execution modes\nlet phoneNumber, messageText, sessionId, startTime;\n\nif ($json.entry && $json.entry[0]?.changes?.[0]?.value?.messages) {\n  // Webhook mode - real WhatsApp message\n  const whatsappData = $json.entry[0].changes[0].value;\n  phoneNumber = whatsappData.messages[0].from;\n  messageText = whatsappData.messages[0].text.body;\n} else {\n  // Manual mode - test data\n  phoneNumber = \"521234567890\";\n  messageText = \"Hola, necesito ayuda con servicios dentales\";\n}\n\nsessionId = phoneNumber + \"_\" + new Date().toISOString().split(\"T\")[0];\nstartTime = Date.now();\n\nreturn {\n  json: {\n    execution_mode: $json.entry ? \"webhook\" : \"manual\",\n    phone_number: phoneNumber,\n    message_text: messageText,\n    session_id: sessionId,\n    start_time: startTime,\n    // AI Agent expects chatInput field (proven working solution)\n    chatInput: messageText,\n    // Ensure proper structure for other nodes\n    messages: [{ text: { body: messageText } }],\n    contacts: [{ wa_id: phoneNumber }]\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        0
      ],
      "id": "data-processor",
      "name": "Data Processor"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "Eres un asistente virtual especializado en Beneficios 360°, un programa integral de beneficios para empleados en México. Tu función es ayudar a los usuarios con información sobre servicios médicos, dentales, de bienestar y otros beneficios disponibles.\n\n## Instrucciones principales:\n\n1. **Saluda cordialmente** y pregunta cómo puedes ayudar\n2. **Solicita el RFC** del usuario para verificar su elegibilidad\n3. **Identifica el servicio** que necesita el usuario\n4. **Proporciona información específica** sobre el servicio solicitado\n5. **Ofrece próximos pasos** claros y concretos\n\n## Servicios disponibles:\n- Consultas médicas generales y especializadas\n- Servicios dentales (limpiezas, tratamientos, ortodoncias)\n- Servicios de bienestar (masajes, terapias, nutrición)\n- Programas de salud mental y apoyo psicológico\n- Descuentos en farmacias y laboratorios\n- Servicios de telemedicina\n\n## Protocolo de respuesta:\n\n1. Si el usuario no ha proporcionado su RFC:\n   - Solicítalo amablemente: \"Para poder ayudarte mejor, ¿podrías proporcionarme tu RFC?\"\n   \n2. Si el usuario menciona un servicio específico:\n   - Confirma el servicio solicitado\n   - Proporciona información relevante del catálogo\n   - Explica el proceso para acceder al servicio\n   \n3. Si el usuario tiene dudas generales:\n   - Pregunta qué tipo de servicio le interesa\n   - Ofrece opciones principales\n   \n4. Si necesitas escalar:\n   - Indica que transferirás a un especialista\n   - Explica brevemente por qué es necesario\n\n## Tono y estilo:\n- Profesional pero amigable\n- Claro y conciso\n- Empático y servicial\n- Usa un lenguaje accesible\n\n## Limitaciones:\n- No proporciones información médica específica o diagnósticos\n- No hagas promesas sobre disponibilidad sin verificar\n- Si no tienes información específica, indica que consultarás con un especialista\n\nRecuerda: Tu objetivo es brindar una experiencia de servicio excepcional y guiar a los usuarios hacia la resolución de sus necesidades de beneficios."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        592,
        0
      ],
      "id": "ai-agent",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        608,
        208
      ],
      "id": "openai-chat-model",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "3q4oUlJszaG8iQjV",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.2,
      "position": [
        608,
        400
      ],
      "id": "simple-memory",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "jsCode": "// Response Logger - Clean logging logic with proper error handling\nconst aiResponse = $json.output;\nconst processingTime = Date.now() - $('Data Processor').item.json.start_time;\n\n// Extract RFC and service information\nconst rfcMatch = aiResponse.match(/RFC[:\\s]+([A-Z]{3,4}\\d{6}[A-Z0-9]{3})/i);\nconst serviceMatch = aiResponse.match(/servicio.*?:\\s*(.+?)(?:\\n|$)/i);\n\nreturn {\n  json: {\n    log_data: {\n      session_id: $('Data Processor').item.json.session_id,\n      client_phone: $('Data Processor').item.json.phone_number,\n      client_name: null,\n      user_messages: [{\n        message: $('Data Processor').item.json.message_text,\n        timestamp: new Date($('Data Processor').item.json.start_time).toISOString()\n      }],\n      ai_responses: [{\n        message: aiResponse,\n        timestamp: new Date().toISOString()\n      }],\n      processing_time_ms: processingTime,\n      client_rfc: rfcMatch ? rfcMatch[1] : null,\n      detected_service_name: serviceMatch ? serviceMatch[1].trim() : null,\n      escalated: aiResponse.toLowerCase().includes('escalar'),\n      last_interaction_at: new Date().toISOString()\n    },\n    phone_number: $('Data Processor').item.json.phone_number,\n    ai_output: aiResponse\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1136,
        336
      ],
      "id": "response-logger",
      "name": "Response Logger"
    },
    {
      "parameters": {
        "operation": "executeQuery"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1008,
        0
      ],
      "id": "supabase-logger",
      "name": "Supabase Logger",
      "credentials": {
        "supabaseApi": {
          "id": "3cWpmHKucArMZqnb",
          "name": "Supabase account ALLNEW"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "Clientes y Servicios disponibles",
        "filters": {
          "conditions": [
            {
              "keyName": "RFC",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('conditions0_Value', ``, 'string') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        608,
        608
      ],
      "id": "check-rfc-supabase",
      "name": "Check RFC in Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "3cWpmHKucArMZqnb",
          "name": "Supabase account ALLNEW"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "updated_service_catalog",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        800,
        608
      ],
      "id": "get-service-catalog",
      "name": "Get Service Catalog",
      "credentials": {
        "supabaseApi": {
          "id": "3cWpmHKucArMZqnb",
          "name": "Supabase account ALLNEW"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "656120877588471",
        "recipientPhoneNumber": "={{ $('WhatsApp Trigger').item.json.contacts[0].wa_id.replace(/^521/, '52') }}",
        "message": "={{ $('Response Logger').item.json.ai_output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        1248,
        16
      ],
      "id": "7e5e6e64-0a03-4f26-96be-6a4b81b94b10",
      "name": "Send message",
      "webhookId": "162b1145-41ab-4dc1-81ee-5d2bf0c15776",
      "credentials": {
        "whatsAppApi": {
          "id": "hXkgbWLFVaGKDtkK",
          "name": "WhatsApp Long Live Token (AUG)"
        }
      }
    }
  ],
  "connections": {
    "WhatsApp Trigger": {
      "main": [
        [
          {
            "node": "Input Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Validator": {
      "main": [
        [
          {
            "node": "Data Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Processor": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Response Logger",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Check RFC in Supabase": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Service Catalog": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 1
          }
        ]
      ]
    },
    "Response Logger": {
      "main": [
        [
          {
            "node": "Supabase Logger",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Logger": {
      "main": [
        [
          {
            "node": "Send message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "3cebbf7a-b835-43fe-a81f-ae4851822e3f",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-07-24T14:19:11.666Z",
      "updatedAt": "2025-07-24T14:19:11.666Z",
      "role": "workflow:owner",
      "workflowId": "GJI87kugFbSeAya2",
      "projectId": "7BVvTZFi4hTTnevY",
      "project": {
        "createdAt": "2025-06-10T19:44:05.593Z",
        "updatedAt": "2025-06-10T19:44:08.050Z",
        "id": "7BVvTZFi4hTTnevY",
        "name": "Fernando Rau <fernando@wasilda.com>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-06-10T19:44:05.593Z",
            "updatedAt": "2025-06-10T19:44:05.593Z",
            "role": "project:personalOwner",
            "userId": "449eacf0-7817-46d1-b557-8002e9a8c93e",
            "projectId": "7BVvTZFi4hTTnevY",
            "user": {
              "createdAt": "2025-06-10T19:44:04.084Z",
              "updatedAt": "2025-07-24T06:05:47.000Z",
              "id": "449eacf0-7817-46d1-b557-8002e9a8c93e",
              "email": "fernando@wasilda.com",
              "firstName": "Fernando",
              "lastName": "Rau",
              "personalizationAnswers": null,
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "ZCW0gb7hAd3DLco9",
                "userActivatedAt": 1749679886422,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1750624364679
                }
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-07-24",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}
